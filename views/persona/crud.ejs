<!-- Este es tu archivo CRUD para Personas -->

<!DOCTYPE html>
<html lang="en">

<%- include('../layouts/head.ejs') %>

<body>
    
    <%- include('../layouts/navBar.ejs') %>
    
    <h1>CRUD de Personas</h1>

    <!-- Formulario para Crear Persona -->
    <form id="createForm" action="/api/web/persona" method="POST" onsubmit="return createPersona()">
        <label for="name">Nombre:</label>
        <input type="text" name="name" id="personaName" required>
        <button type="submit">Crear Persona</button>
    </form>

    <!-- Tabla de Personas -->
    <table>
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Edad</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            <% personas.forEach(persona => { %>
                <tr>
                    <!-- Detalles de Persona -->
                    <td><a href="#" onclick="showPersonaDetails('<%= persona._id %>')"><%= persona.name %></a></td>
                    <!-- Enlace para Editar Persona -->
                    <td><a href="#" onclick="showEditForm('<%= persona._id %>', '<%= persona.name %>'); event.preventDefault();">Editar</a></td>
                    <!-- Botón para Eliminar Persona -->
                    <td>
                        <button type="button" onclick="confirmDelete('<%= persona._id %>')">Eliminar</button>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>

    <div id="personaDetails">
        <!-- Aquí se cargarán dinámicamente los detalles de la persona -->
    </div>

    <!-- Formulario para Editar Persona -->
    <form id="editForm" style="display: none;" onsubmit="return editPersona()">
        <input type="hidden" id="editId" name="_id">
        <label for="editName">Nuevo Nombre:</label>
        <input type="text" id="editName" name="name" required>
        <button type="submit">Guardar Cambios</button>
    </form>

    <script>
        // Función para mostrar el formulario de edición
        function showEditForm(id, name) {
            // Ocultar todos los formularios de edición antes de mostrar uno nuevo
            hideAllEditForms();
            document.getElementById('editId').value = id;
            document.getElementById('editName').value = name;
            document.getElementById('editForm').style.display = 'block';
        }

        // Función para ocultar todos los formularios de edición
        function hideAllEditForms() {
            const editForms = document.querySelectorAll('.edit-form');
            editForms.forEach(form => {
                form.style.display = 'none';
            });
        }

        // Función para confirmar antes de eliminar
        function confirmDelete(personaId) {
            if (confirm('¿Estás seguro de que deseas eliminar a esta persona?')) {
                // Realizar eliminación de manera asíncrona (AJAX)
                fetch(`/api/web/persona/${personaId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    // Actualizar la página sin recargar
                    location.reload();
                })
                .catch(error => console.error('Error al eliminar persona:', error));
            }
        }

        // Función para realizar la creación de persona y recargar la página
        function createPersona() {
            // Obtener los valores del formulario
            const personaName = document.getElementById('personaName').value;

            // Realizar la creación de manera asíncrona (AJAX)
            fetch("/api/web/persona", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ name: personaName}), // Enviar datos como JSON
            })
                .then((response) => response.json())
                .then((data) => {
                    // Actualizar la página sin recargar
                    location.reload();
                    return false; // Evitar la recarga por defecto del formulario
                })
                .catch((error) => console.error("Error al crear persona:", error));

            return false; // Evitar el envío por defecto del formulario
        }

        // Función para realizar la edición de persona y recargar la página
        function editPersona() {
            // Obtener los valores del formulario
            const personaId = document.getElementById('editId').value;
            const newPersonaName = document.getElementById('editName').value;

            // Realizar la edición de manera asíncrona (AJAX)
            fetch(`/api/web/persona/${personaId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name: newPersonaName}), // Enviar nuevos datos como JSON
            })
                .then(response => response.json())
                .then(data => {
                    // Ocultar el formulario de edición
                    document.getElementById('editForm').style.display = 'none';
                    // Actualizar la página sin recargar
                    location.reload();
                    return false; // Evitar la recarga por defecto del formulario
                })
                .catch(error => console.error('Error al editar persona:', error));

            return false; // Evitar el envío por defecto del formulario
        }
        function showPersonaDetails(personaId) {
            // Realiza una solicitud AJAX para obtener detalles de la persona según el ID
            fetch(`/api/web/persona/${personaId}`)
                .then(response => response.json())
                .then(data => {
                    // Actualiza la sección de detalles con la información obtenida
                    document.getElementById('personaDetails').innerHTML = `
                        <h2>Detalles de ${data.name}</h2>
                        <p>DATA USUARIO</p>
                        <!-- Agrega más detalles según tu modelo de datos -->
                    `;
                })
                .catch(error => console.error('Error al obtener detalles de persona:', error));
        }
    </script>
</body>

</html>
