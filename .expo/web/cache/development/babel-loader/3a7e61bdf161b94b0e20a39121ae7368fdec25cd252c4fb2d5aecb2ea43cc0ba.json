{"ast":null,"code":"var bcrypt = require('bcrypt');\nvar User = require(\"../models/user\");\nexports.login = function (req, res) {\n  var _req$body = req.body,\n    username = _req$body.username,\n    password = _req$body.password;\n  User.findOne({\n    username: username\n  }).then(function (user) {\n    if (user) {\n      bcrypt.compare(password, user.password, function (err, result) {\n        if (result) {\n          res.json({\n            message: 'Inicio de sesión exitoso',\n            user: user\n          });\n        } else {\n          res.status(401).json({\n            message: 'Credenciales inválidas'\n          });\n        }\n      });\n    } else {\n      res.status(401).json({\n        message: 'Credenciales inválidas'\n      });\n    }\n  }).catch(function (error) {\n    res.status(500).json({\n      error: error.message\n    });\n  });\n};\nexports.register = function (req, res) {\n  var _req$body2 = req.body,\n    username = _req$body2.username,\n    password = _req$body2.password;\n  bcrypt.hash(password, 10, function (err, hash) {\n    if (err) {\n      return res.status(500).json({\n        error: err.message\n      });\n    }\n    User.findOne({\n      username: username\n    }).then(function (existingUser) {\n      if (existingUser) {\n        res.status(400).json({\n          message: 'El nombre de usuario ya está en uso'\n        });\n      } else {\n        var newUser = new User({\n          username: username,\n          password: hash\n        });\n        newUser.save().then(function (user) {\n          res.status(201).json({\n            message: 'Usuario registrado exitosamente',\n            user: user\n          });\n        }).catch(function (error) {\n          res.status(500).json({\n            error: error.message\n          });\n        });\n      }\n    }).catch(function (error) {\n      res.status(500).json({\n        error: error.message\n      });\n    });\n  });\n};","map":{"version":3,"names":["bcrypt","require","User","exports","login","req","res","_req$body","body","username","password","findOne","then","user","compare","err","result","json","message","status","catch","error","register","_req$body2","hash","existingUser","newUser","save"],"sources":["C:/Users/Usuario/Downloads/apiQR-version_1/apiQR-version_1/Backend/services/authService.js"],"sourcesContent":["const bcrypt = require('bcrypt');\r\nconst User = require('../models/user');\r\n\r\nexports.login = (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  User.findOne({ username })\r\n    .then((user) => {\r\n      if (user) {\r\n        // Compara la contraseña encriptada almacenada con la proporcionada\r\n        bcrypt.compare(password, user.password, (err, result) => {\r\n          if (result) {\r\n            res.json({ message: 'Inicio de sesión exitoso', user });\r\n          } else {\r\n            res.status(401).json({ message: 'Credenciales inválidas' });\r\n          }\r\n        });\r\n      } else {\r\n        res.status(401).json({ message: 'Credenciales inválidas' });\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      res.status(500).json({ error: error.message });\r\n    });\r\n};\r\n\r\nexports.register = (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  // Encripta la contraseña antes de guardarla en la base de datos\r\n  bcrypt.hash(password, 10, (err, hash) => {\r\n    if (err) {\r\n      return res.status(500).json({ error: err.message });\r\n    }\r\n\r\n    User.findOne({ username })\r\n      .then((existingUser) => {\r\n        if (existingUser) {\r\n          res.status(400).json({ message: 'El nombre de usuario ya está en uso' });\r\n        } else {\r\n          // Crea un nuevo usuario con la contraseña encriptada\r\n          const newUser = new User({ username, password: hash });\r\n\r\n          // Guarda el nuevo usuario en la base de datos\r\n          newUser.save()\r\n            .then((user) => {\r\n              res.status(201).json({ message: 'Usuario registrado exitosamente', user });\r\n            })\r\n            .catch((error) => {\r\n              res.status(500).json({ error: error.message });\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        res.status(500).json({ error: error.message });\r\n      });\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}