{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar userService = {\n  apiUrl: 'http://localhost:3000/api/users',\n  register: function () {\n    var _register = _asyncToGenerator(function* (username, password) {\n      try {\n        console.log('Registrando usuario:', username);\n        var response = yield fetch(`${userService.apiUrl}/register`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: username,\n            password: password\n          })\n        });\n        var data = yield response.json();\n        console.log('Respuesta del servidor:', data);\n      } catch (error) {\n        console.error('Error al registrar:', error.message);\n        throw new Error('Error al registrar');\n      }\n    });\n    function register(_x, _x2) {\n      return _register.apply(this, arguments);\n    }\n    return register;\n  }(),\n  register: function () {\n    var _register2 = _asyncToGenerator(function* (username, password) {\n      try {\n        var response = yield fetch(`${userService.apiUrl}/register`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: username,\n            password: password\n          })\n        });\n        var data = yield response.json();\n        localStorage.setItem('authToken', data.token);\n        return data;\n      } catch (error) {\n        throw new Error('Error al registrar');\n      }\n    });\n    function register(_x3, _x4) {\n      return _register2.apply(this, arguments);\n    }\n    return register;\n  }(),\n  logout: function logout() {\n    localStorage.removeItem('authToken');\n  },\n  isLoggedIn: function isLoggedIn() {\n    return !!localStorage.getItem('authToken');\n  }\n};\nexport default userService;","map":{"version":3,"names":["userService","apiUrl","register","_register","_asyncToGenerator","username","password","console","log","response","fetch","method","headers","body","JSON","stringify","data","json","error","message","Error","_x","_x2","apply","arguments","_register2","localStorage","setItem","token","_x3","_x4","logout","removeItem","isLoggedIn","getItem"],"sources":["C:/Users/Usuario/Downloads/apiQR-version_1/apiQR-version_1/services/authService.js"],"sourcesContent":["const userService = {\r\n  apiUrl: 'http://localhost:3000/api/users',\r\n\r\n  register: async (username, password) => {\r\n    try {\r\n        console.log('Registrando usuario:', username);\r\n        // Realiza la solicitud al servidor para registrar el usuario y guarda la respuesta\r\n        const response = await fetch(`${userService.apiUrl}/register`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ username, password }),\r\n        });\r\n        const data = await response.json();\r\n        console.log('Respuesta del servidor:', data);\r\n        // Resto del código...\r\n    } catch (error) {\r\n        console.error('Error al registrar:', error.message);\r\n        throw new Error('Error al registrar');\r\n    }\r\n},\r\n\r\n\r\n  register: async (username, password) => {\r\n    try {\r\n      const response = await fetch(`${userService.apiUrl}/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n      const data = await response.json();\r\n      localStorage.setItem('authToken', data.token);\r\n      // Aquí podrías usar un sistema de notificaciones o mensajes para mostrar que el registro fue exitoso\r\n      return data;\r\n    } catch (error) {\r\n      throw new Error('Error al registrar');\r\n    }\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('authToken');\r\n  },\r\n\r\n  isLoggedIn: () => {\r\n    return !!localStorage.getItem('authToken');\r\n  },\r\n};\r\n\r\nexport default userService;\r\n"],"mappings":";AAAA,IAAMA,WAAW,GAAG;EAClBC,MAAM,EAAE,iCAAiC;EAEzCC,QAAQ;IAAA,IAAAC,SAAA,GAAAC,iBAAA,CAAE,WAAOC,QAAQ,EAAEC,QAAQ,EAAK;MACtC,IAAI;QACAC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,QAAQ,CAAC;QAE7C,IAAMI,QAAQ,SAASC,KAAK,CAAE,GAAEV,WAAW,CAACC,MAAO,WAAU,EAAE;UAC3DU,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEV,QAAQ,EAARA,QAAQ;YAAEC,QAAQ,EAARA;UAAS,CAAC;QAC/C,CAAC,CAAC;QACF,IAAMU,IAAI,SAASP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClCV,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEQ,IAAI,CAAC;MAEhD,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZX,OAAO,CAACW,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACC,OAAO,CAAC;QACnD,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;MACzC;IACJ,CAAC;IAAA,SAAAlB,SAAAmB,EAAA,EAAAC,GAAA;MAAA,OAAAnB,SAAA,CAAAoB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAtB,QAAA;EAAA;EAGCA,QAAQ;IAAA,IAAAuB,UAAA,GAAArB,iBAAA,CAAE,WAAOC,QAAQ,EAAEC,QAAQ,EAAK;MACtC,IAAI;QACF,IAAMG,QAAQ,SAASC,KAAK,CAAE,GAAEV,WAAW,CAACC,MAAO,WAAU,EAAE;UAC7DU,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEV,QAAQ,EAARA,QAAQ;YAAEC,QAAQ,EAARA;UAAS,CAAC;QAC7C,CAAC,CAAC;QACF,IAAMU,IAAI,SAASP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClCS,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEX,IAAI,CAACY,KAAK,CAAC;QAE7C,OAAOZ,IAAI;MACb,CAAC,CAAC,OAAOE,KAAK,EAAE;QACd,MAAM,IAAIE,KAAK,CAAC,oBAAoB,CAAC;MACvC;IACF,CAAC;IAAA,SAAAlB,SAAA2B,GAAA,EAAAC,GAAA;MAAA,OAAAL,UAAA,CAAAF,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAtB,QAAA;EAAA;EAED6B,MAAM,EAAE,SAAAA,OAAA,EAAM;IACZL,YAAY,CAACM,UAAU,CAAC,WAAW,CAAC;EACtC,CAAC;EAEDC,UAAU,EAAE,SAAAA,WAAA,EAAM;IAChB,OAAO,CAAC,CAACP,YAAY,CAACQ,OAAO,CAAC,WAAW,CAAC;EAC5C;AACF,CAAC;AAED,eAAelC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}