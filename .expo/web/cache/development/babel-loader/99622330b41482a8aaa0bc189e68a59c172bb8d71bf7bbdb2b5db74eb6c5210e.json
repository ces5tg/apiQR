{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar userService = {\n  apiUrl: 'http://localhost:3000/api/auth',\n  login: function () {\n    var _login = _asyncToGenerator(function* (username, password) {\n      try {\n        var _data$user;\n        var response = yield fetch(`${userService.apiUrl}/login`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: username,\n            password: password\n          })\n        });\n        var data = yield response.json();\n        var token = data.token || ((_data$user = data.user) == null ? void 0 : _data$user.token) || null;\n        if (token) {\n          yield AsyncStorage.setItem('authToken', token);\n          return token;\n        } else {\n          throw new Error('No se pudo obtener el token después del inicio de sesión');\n        }\n      } catch (error) {\n        throw new Error('Error al iniciar sesión');\n      }\n    });\n    function login(_x, _x2) {\n      return _login.apply(this, arguments);\n    }\n    return login;\n  }(),\n  register: function () {\n    var _register = _asyncToGenerator(function* (username, password) {\n      try {\n        console.log('Registrando usuario:', username);\n        var response = yield fetch(`${userService.apiUrl}/register`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: username,\n            password: password\n          })\n        });\n        var data = yield response.json();\n        console.log('Respuesta del servidor:', data);\n        return data;\n      } catch (error) {\n        throw new Error('Error al registrar');\n      }\n    });\n    function register(_x3, _x4) {\n      return _register.apply(this, arguments);\n    }\n    return register;\n  }(),\n  logout: function () {\n    var _logout = _asyncToGenerator(function* () {\n      try {\n        yield AsyncStorage.removeItem('authToken');\n      } catch (error) {\n        throw new Error('Error al cerrar sesión');\n      }\n    });\n    function logout() {\n      return _logout.apply(this, arguments);\n    }\n    return logout;\n  }(),\n  isLoggedIn: function () {\n    var _isLoggedIn = _asyncToGenerator(function* () {\n      try {\n        var token = yield AsyncStorage.getItem('authToken');\n        return !!token;\n      } catch (error) {\n        throw new Error('Error al verificar el estado de inicio de sesión');\n      }\n    });\n    function isLoggedIn() {\n      return _isLoggedIn.apply(this, arguments);\n    }\n    return isLoggedIn;\n  }()\n};\nexport default userService;","map":{"version":3,"names":["AsyncStorage","userService","apiUrl","login","_login","_asyncToGenerator","username","password","_data$user","response","fetch","method","headers","body","JSON","stringify","data","json","token","user","setItem","Error","error","_x","_x2","apply","arguments","register","_register","console","log","_x3","_x4","logout","_logout","removeItem","isLoggedIn","_isLoggedIn","getItem"],"sources":["C:/Users/Usuario/Downloads/apiQR-version_1/apiQR-version_1/services/userService.js"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst userService = {\r\n  apiUrl: 'http://localhost:3000/api/auth',\r\n\r\n  login: async (username, password) => {\r\n    try {\r\n      const response = await fetch(`${userService.apiUrl}/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n  \r\n      const data = await response.json();\r\n  \r\n      // Verifica la estructura de la respuesta e intenta encontrar el token\r\n      const token = data.token || data.user?.token || null; // Ejemplo, acceder al token según la estructura de la respuesta\r\n  \r\n      if (token) {\r\n        await AsyncStorage.setItem('authToken', token);\r\n        return token;\r\n      } else {\r\n        throw new Error('No se pudo obtener el token después del inicio de sesión');\r\n      }\r\n    } catch (error) {\r\n      throw new Error('Error al iniciar sesión');\r\n    }\r\n  },\r\n  \r\n  \r\n\r\n  register: async (username, password) => {\r\n    try {\r\n      console.log('Registrando usuario:', username);\r\n      // Realiza la solicitud al servidor para registrar el usuario y guarda la respuesta\r\n      const response = await fetch(`${userService.apiUrl}/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n      const data = await response.json();\r\n      console.log('Respuesta del servidor:', data);\r\n      // Aquí podrías usar un sistema de notificaciones o mensajes para mostrar que el registro fue exitoso\r\n      return data;\r\n    } catch (error) {\r\n      throw new Error('Error al registrar');\r\n    }\r\n  },\r\n\r\n  logout: async () => {\r\n    try {\r\n      await AsyncStorage.removeItem('authToken');\r\n    } catch (error) {\r\n      throw new Error('Error al cerrar sesión');\r\n    }\r\n  },\r\n\r\n  isLoggedIn: async () => {\r\n    try {\r\n      const token = await AsyncStorage.getItem('authToken');\r\n      return !!token;\r\n    } catch (error) {\r\n      throw new Error('Error al verificar el estado de inicio de sesión');\r\n    }\r\n  },\r\n};\r\n\r\nexport default userService;\r\n"],"mappings":";AAAA,OAAOA,YAAY,MAAM,2CAA2C;AAEpE,IAAMC,WAAW,GAAG;EAClBC,MAAM,EAAE,gCAAgC;EAExCC,KAAK;IAAA,IAAAC,MAAA,GAAAC,iBAAA,CAAE,WAAOC,QAAQ,EAAEC,QAAQ,EAAK;MACnC,IAAI;QAAA,IAAAC,UAAA;QACF,IAAMC,QAAQ,SAASC,KAAK,CAAE,GAAET,WAAW,CAACC,MAAO,QAAO,EAAE;UAC1DS,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAET,QAAQ,EAARA,QAAQ;YAAEC,QAAQ,EAARA;UAAS,CAAC;QAC7C,CAAC,CAAC;QAEF,IAAMS,IAAI,SAASP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAGlC,IAAMC,KAAK,GAAGF,IAAI,CAACE,KAAK,MAAAV,UAAA,GAAIQ,IAAI,CAACG,IAAI,qBAATX,UAAA,CAAWU,KAAK,KAAI,IAAI;QAEpD,IAAIA,KAAK,EAAE;UACT,MAAMlB,YAAY,CAACoB,OAAO,CAAC,WAAW,EAAEF,KAAK,CAAC;UAC9C,OAAOA,KAAK;QACd,CAAC,MAAM;UACL,MAAM,IAAIG,KAAK,CAAC,0DAA0D,CAAC;QAC7E;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd,MAAM,IAAID,KAAK,CAAC,yBAAyB,CAAC;MAC5C;IACF,CAAC;IAAA,SAAAlB,MAAAoB,EAAA,EAAAC,GAAA;MAAA,OAAApB,MAAA,CAAAqB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAvB,KAAA;EAAA;EAIDwB,QAAQ;IAAA,IAAAC,SAAA,GAAAvB,iBAAA,CAAE,WAAOC,QAAQ,EAAEC,QAAQ,EAAK;MACtC,IAAI;QACFsB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAExB,QAAQ,CAAC;QAE7C,IAAMG,QAAQ,SAASC,KAAK,CAAE,GAAET,WAAW,CAACC,MAAO,WAAU,EAAE;UAC7DS,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAET,QAAQ,EAARA,QAAQ;YAAEC,QAAQ,EAARA;UAAS,CAAC;QAC7C,CAAC,CAAC;QACF,IAAMS,IAAI,SAASP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClCY,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEd,IAAI,CAAC;QAE5C,OAAOA,IAAI;MACb,CAAC,CAAC,OAAOM,KAAK,EAAE;QACd,MAAM,IAAID,KAAK,CAAC,oBAAoB,CAAC;MACvC;IACF,CAAC;IAAA,SAAAM,SAAAI,GAAA,EAAAC,GAAA;MAAA,OAAAJ,SAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAC,QAAA;EAAA;EAEDM,MAAM;IAAA,IAAAC,OAAA,GAAA7B,iBAAA,CAAE,aAAY;MAClB,IAAI;QACF,MAAML,YAAY,CAACmC,UAAU,CAAC,WAAW,CAAC;MAC5C,CAAC,CAAC,OAAOb,KAAK,EAAE;QACd,MAAM,IAAID,KAAK,CAAC,wBAAwB,CAAC;MAC3C;IACF,CAAC;IAAA,SAAAY,OAAA;MAAA,OAAAC,OAAA,CAAAT,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAO,MAAA;EAAA;EAEDG,UAAU;IAAA,IAAAC,WAAA,GAAAhC,iBAAA,CAAE,aAAY;MACtB,IAAI;QACF,IAAMa,KAAK,SAASlB,YAAY,CAACsC,OAAO,CAAC,WAAW,CAAC;QACrD,OAAO,CAAC,CAACpB,KAAK;MAChB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACd,MAAM,IAAID,KAAK,CAAC,kDAAkD,CAAC;MACrE;IACF,CAAC;IAAA,SAAAe,WAAA;MAAA,OAAAC,WAAA,CAAAZ,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAU,UAAA;EAAA;AACH,CAAC;AAED,eAAenC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}